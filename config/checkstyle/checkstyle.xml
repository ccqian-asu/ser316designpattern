<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
          "http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html.
    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.sf.net (or in your downloaded distribution).
    To completely disable a check, just comment it out or delete it from the file.
    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module carName = "Checker">
    <property carName="charset" value="UTF-8"/>

    <property carName="severity" value="warning"/>

    <property carName="fileExtensions" value="java, properties, xml"/>
    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.sf.net/config_whitespace.html -->
    <module carName="FileTabCharacter">
        <property carName="eachLine" value="true"/>
    </module>

    <module carName="TreeWalker">
        <module carName="OuterTypeFilename"/>
        <module carName="IllegalTokenText">
            <property carName="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property carName="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property carName="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module carName="AvoidEscapedUnicodeCharacters">
            <property carName="allowEscapesForControlCharacters" value="true"/>
            <property carName="allowByTailComment" value="true"/>
            <property carName="allowNonPrintableEscapes" value="true"/>
        </module>
        <module carName="LineLength">
            <property carName="max" value="100"/>
            <property carName="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module carName="AvoidStarImport"/>
        <module carName="OneTopLevelClass"/>
        <module carName="NoLineWrap"/>
        <module carName="EmptyBlock">
            <property carName="option" value="TEXT"/>
            <property carName="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module carName="NeedBraces"/>
        <module carName="LeftCurly"/>
        <module carName="RightCurly">
            <property carName="id" value="RightCurlySame"/>
            <property carName="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module carName="RightCurly">
            <property carName="id" value="RightCurlyAlone"/>
            <property carName="option" value="alone"/>
            <property carName="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module carName="WhitespaceAround">
            <property carName="allowEmptyConstructors" value="true"/>
            <property carName="allowEmptyMethods" value="true"/>
            <property carName="allowEmptyTypes" value="true"/>
            <property carName="allowEmptyLoops" value="true"/>
            <message key="ws.notFollowed"
             value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
             <message key="ws.notPreceded"
             value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
        <module carName="OneStatementPerLine"/>
        <module carName="MultipleVariableDeclarations"/>
        <module carName="ArrayTypeStyle"/>
        <module carName="MissingSwitchDefault"/>
        <module carName="FallThrough"/>
        <module carName="UpperEll"/>
        <module carName="ModifierOrder"/>
        <module carName="EmptyLineSeparator">
            <property carName="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module carName="SeparatorWrap">
            <property carName="id" value="SeparatorWrapDot"/>
            <property carName="tokens" value="DOT"/>
            <property carName="option" value="nl"/>
        </module>
        <module carName="SeparatorWrap">
            <property carName="id" value="SeparatorWrapComma"/>
            <property carName="tokens" value="COMMA"/>
            <property carName="option" value="EOL"/>
        </module>
        <module carName="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property carName="id" value="SeparatorWrapEllipsis"/>
            <property carName="tokens" value="ELLIPSIS"/>
            <property carName="option" value="EOL"/>
        </module>
        <module carName="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property carName="id" value="SeparatorWrapArrayDeclarator"/>
            <property carName="tokens" value="ARRAY_DECLARATOR"/>
            <property carName="option" value="EOL"/>
        </module>
        <module carName="SeparatorWrap">
            <property carName="id" value="SeparatorWrapMethodRef"/>
            <property carName="tokens" value="METHOD_REF"/>
            <property carName="option" value="nl"/>
        </module>
        <module carName="PackageName">
            <property carName="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="carName.invalidPattern"
             value="Package carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="TypeName">
            <message key="carName.invalidPattern"
             value="Type carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="MemberName">
            <property carName="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="carName.invalidPattern"
             value="Member carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="ParameterName">
            <property carName="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="carName.invalidPattern"
             value="Parameter carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="CatchParameterName">
            <property carName="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="carName.invalidPattern"
             value="Catch parameter carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="LocalVariableName">
            <property carName="tokens" value="VARIABLE_DEF"/>
            <property carName="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="carName.invalidPattern"
             value="Local variable carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="ClassTypeParameterName">
            <property carName="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="carName.invalidPattern"
             value="Class carType carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="MethodTypeParameterName">
            <property carName="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="carName.invalidPattern"
             value="Method carType carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="InterfaceTypeParameterName">
            <property carName="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="carName.invalidPattern"
             value="Interface carType carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="NoFinalizer"/>
        <module carName="GenericWhitespace">
            <message key="ws.followed"
             value="GenericWhitespace ''{0}'' is followed by whitespace."/>
             <message key="ws.preceded"
             value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
             <message key="ws.illegalFollow"
             value="GenericWhitespace ''{0}'' should followed by whitespace."/>
             <message key="ws.notPreceded"
             value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module carName="Indentation">
            <property carName="basicOffset" value="4"/>
            <property carName="braceAdjustment" value="0"/>
            <property carName="caseIndent" value="4"/>
            <property carName="throwsIndent" value="4"/>
            <property carName="lineWrappingIndentation" value="4"/>
            <property carName="arrayInitIndent" value="4"/>
        </module>
        <module carName="AbbreviationAsWordInName">
            <property carName="ignoreFinal" value="false"/>
            <property carName="allowedAbbreviationLength" value="1"/>
        </module>
        <module carName="OverloadMethodsDeclarationOrder"/>
        <module carName="VariableDeclarationUsageDistance"/>
        <module carName="CustomImportOrder">
            <property carName="sortImportsInGroupAlphabetically" value="true"/>
            <property carName="separateLineBetweenGroups" value="true"/>
            <property carName="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
        </module>
        <module carName="MethodParamPad"/>
        <module carName="NoWhitespaceBefore">
          <property carName="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property carName="allowLineBreaks" value="true"/>
        </module>
        <module carName="ParenPad"/>
        <module carName="OperatorWrap">
            <property carName="option" value="NL"/>
            <property carName="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module carName="AnnotationLocation">
            <property carName="id" value="AnnotationLocationMostCases"/>
            <property carName="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module carName="AnnotationLocation">
            <property carName="id" value="AnnotationLocationVariables"/>
            <property carName="tokens" value="VARIABLE_DEF"/>
            <property carName="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module carName="NonEmptyAtclauseDescription"/>
        <module carName="JavadocTagContinuationIndentation"/>
        <module carName="SummaryJavadoc">
            <property carName="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module carName="JavadocParagraph"/>
        <module carName="AtclauseOrder">
            <property carName="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property carName="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module carName="JavadocMethod">
            <property carName="scope" value="public"/>
            <property carName="allowMissingParamTags" value="true"/>
            <property carName="allowMissingThrowsTags" value="true"/>
            <property carName="allowMissingReturnTag" value="true"/>
            <property carName="minLineCount" value="2"/>
            <property carName="allowedAnnotations" value="Override, Test"/>
            <property carName="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <module carName="MethodName">
            <property carName="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="carName.invalidPattern"
             value="Method carName ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module carName="SingleLineJavadoc">
            <property carName="ignoreInlineTags" value="false"/>
        </module>
        <module carName="EmptyCatchBlock">
            <property carName="exceptionVariableName" value="expected"/>
        </module>
        <module carName="CommentsIndentation"/>
    </module>
</module>